📄 Organized Scann API

📋 Sobre o Projeto

A Organized Scann API é uma aplicação backend desenvolvida em Spring Boot 3 para gestão inteligente de motos em pátios de manutenção e recuperação, utilizando identificação via RFID.

As motos são organizadas em portais de classificação:

1- ⚙️ Manutenção Rápida

2- 🚰 Manutenção Demorada

3- 🛳️ Boletins de Ocorrência

4- 🧹 Motos Recuperadas / Carcaças

Obs: Os IDs de cada portal são exatamente nesta ordem acima com ID1,ID2,ID3 E ID4.

Funcionalidades principais:

Cadastro de motos associadas a portais.

Consulta paginada e filtrada de motos.

Gerenciamento e resumo dos portais.

Cache para aumentar performance.

Pronto para integração com sistemas IoT e Mobile/Web.

🛠️ Tecnologias Utilizadas

Java 17

Spring Boot 3

Spring Web

Spring Data JPA

Spring Security (configuração básica)

Banco de dados H2 (memória)

Lombok

Cache com Spring Cache

Filtros dinâmicos com Specification

Swagger/OpenAPI (springdoc-openapi)

Spring DevTools (Hot Reload)

⚙️ Como Rodar o Projeto

✅ Pré-requisitos:

Java 17 instalado

Maven 3.8+ instalado

🚀 Rodando localmente:

# Clone o repositório
git clone https://github.com/leosilper/organized-scann-api.git

# Acesse o diretório do projeto
cd organized-scann-api

# Rode o projeto
./mvnw spring-boot:run

🔗 Principais Endpoints

Método

Endpoint

Descrição

GET

/api/motos

Listar motos (com paginação e filtros)

POST

/api/motos

Cadastrar nova moto

GET

/api/motos/{id}

Buscar moto por ID

DELETE

/api/motos/{id}

Deletar moto por ID

GET

/api/portais/resumo

Ver resumo de portais (quantidade de motos)

🔍 Exemplos de Uso no Postman
🚀 1. Listar todas as motocicletas (GET)
Método: GET
URL:

bash
Copiar
Editar
http://localhost:8080/api/motorcycles
No Postman:

Crie uma nova requisição GET

Cole a URL acima

Clique em Send

✅ Vai retornar todas as motocicletas cadastradas no banco!

🚀 2. Buscar motocicletas por filtros (placa, RFID ou portal) (GET)
Exemplos de URLs com filtros:

Buscar motocicletas pela placa contendo "ABC":

bash
Copiar
Editar
http://localhost:8080/api/motorcycles?licensePlate=ABC
Buscar motocicletas pelo RFID "RFID123":

bash
Copiar
Editar
http://localhost:8080/api/motorcycles?rfid=RFID123
Buscar motocicletas por Portal (portalId = 1):

bash
Copiar
Editar
http://localhost:8080/api/motorcycles?portalId=1
Buscar combinando vários filtros:

bash
Copiar
Editar
http://localhost:8080/api/motorcycles?licensePlate=ABC&rfid=RFID123&portalId=1
✅ O sistema filtrará os resultados dinamicamente conforme os parâmetros enviados.

🚀 3. Cadastrar uma nova motocicleta (POST)
Método: POST
URL:

bash
Copiar
Editar
http://localhost:8080/api/motorcycles
Headers:

bash
Copiar
Editar
Content-Type: application/json
Body (JSON):

json
Copiar
Editar
{
    "licensePlate": "XYZ9K88",
    "rfid": "RFID999",
    "entryDate": "2025-05-01",
    "availabilityForecast": "2025-05-10",
    "portal": {
        "id": 2
    }
}
No Postman:

Selecione o método POST

Na aba Body > raw > JSON

Cole o JSON acima

Clique em Send

✅ A motocicleta será cadastrada no banco de dados!

🚀 4. Deletar uma motocicleta (DELETE)
Método: DELETE
URL de exemplo (para deletar a motocicleta com ID = 1):

bash
Copiar
Editar
http://localhost:8080/api/motorcycles/1
No Postman:

Selecione o método DELETE

Cole a URL acima

Clique em Send

✅ Se a resposta for 204 No Content, a motocicleta foi apagada com sucesso.

🚀 5. Listar resumo dos portais (GET)
Método: GET
URL:

bash
Copiar
Editar
http://localhost:8080/api/portals/summary
No Postman:

Crie uma nova requisição GET

Cole a URL acima

Clique em Send

✅ Vai listar todos os portais com o número de motocicletas associadas a cada um.

📚 Documentação Swagger
Após iniciar o projeto, acesse no navegador:

bash
Copiar
Editar
http://localhost:8080/swagger-ui.html

✅ Você poderá visualizar e testar a API de forma interativa!



📈 Banco de Dados

Banco atual: H2 Database (em memória)

JDBC URL: jdbc:h2:mem:organized_scann

Pode ser adaptado para Oracle, PostgreSQL ou MySQL alterando application.properties.

🧐 Sobre o Projeto

Este sistema foi desenvolvido para:

Controle eficiente de motos em pátios.

Organização automatizada por portais.

Integração futura com RFID e IoT.

Preparação para apps mobile e web.

👥 Grupo Desenvolvedor

Leonardo da Silva Pereira | RM 557598

Bruno da Silva Souza | RM 94346

Julio Samuel de Oliveira | RM 557453

